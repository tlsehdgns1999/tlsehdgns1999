###모듈 설치###
import numpy as np 
import pandas as pd 
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import matplotlib.image as mig
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator

###경로 구성###
PATH = 'drive/MyDrive/Colab Notebooks/PokemonData'
classes = os.listdir(PATH)

c1_path=os.path.join(PATH, classes[1])
c1_data_path=[os.path.join(c1_path, img) for img in os.listdir(c1_path) ]
len(c1_data_path)

##데이터 확인###
for i in range(0,5):
  img = mig.imread(c1_data_path[i])
  
  print(i,img.shape)
  
IDG = ImageDataGenerator(rescale = 1/255 )

train_data = IDG.flow_from_directory(PATH,target_size=(256,256),batch_size=8) 

sample_x,sample_y = next(train_data)
for x,y in zip( sample_x,sample_y ):
  plt.imshow(x)
  plt.xlabel(classes[y.argmax()])
  plt.show()
  
###모델 구성###
model = keras.Sequential(name='Poketmon_KNU')
model.add(keras.layers.Conv2D(128,(3,3),input_shape=(256,256,3),activation='relu'))
model.add(keras.layers.MaxPool2D())
model.add(keras.layers.Conv2D(128,(3,3),strides=(2,2),activation='relu'))
model.add(keras.layers.MaxPool2D())
model.add(keras.layers.BatchNormalization())
model.add(keras.layers.Conv2D(64,(3,3),strides=(2,2),activation='relu'))
model.add(keras.layers.MaxPool2D())
model.add(keras.layers.Flatten())
model.add(keras.layers.Dropout(0.2))
model.add(keras.layers.Dense(1024,activation='relu'))
model.add(keras.layers.Dense(256,activation='relu'))
model.add(keras.layers.Dense(len(classes),activation='softmax'))
model.summary()

###가중치 확인###
hidden_0 = model.layers[0]
hidden_2 = model.layers[2]  
hidden_5 = model.layers[5]
hidden_9 = model.layers[9]     
hidden_10 = model.layers[10]
hidden_11 = model.layers[11] 

weights_0, biases_0 = hidden_0.get_weights()
weights_2, biases_2 = hidden_2.get_weights()
weights_5, biases_5 = hidden_5.get_weights()
weights_9, biases_9 = hidden_9.get_weights()
weights_10, biases_10 = hidden_10.get_weights()
weights_11, biases_11 = hidden_11.get_weights()

print(weights_0, weights_2, weights_5, weights_9, weights_10, weights_11)
print(biases_0, biases_2, biases_5, biases_9, biases_10, biases_11)

plt.hist(weights_11.reshape(-1,1))
plt.xlabel('weight')
plt.ylabel('count')
plt.show()

###모델 학습###
model.compile(optimizer='adam',
             loss=tf.keras.losses.categorical_crossentropy,
             metrics=['accuracy']
             )

hist = model.fit_generator(train_data,epochs=20)

###ACCURACY 확인###
plt.style.use('fivethirtyeight')
plt.figure(figsize=(14,14))
plt.plot(hist.history['accuracy'],label='accuracy',color='green')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.yticks(np.arange(0, 1, step=0.04))
plt.show()

###예측값 시각화###
plt.figure(figsize=(20,20))
sam_x,sam_y = next(train_data) 
pred_ = model.predict(sam_x)
for i in range(len(sam_x)):
    pred,y = pred_[i].argmax(), sam_y[i].argmax()
    plt.subplot(4,4,i+1)
    plt.imshow(sam_x[i])
    title_ = 'Predict:' + str(classes[pred])+ ';   Label:' + str(classes[y])
    plt.title(title_,size=11)
plt.show()
